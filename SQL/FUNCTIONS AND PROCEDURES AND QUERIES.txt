-----------------------------------------------
TODO BEFORE NEW DATABASE SETUP
	1.change .cdrc.json
	2.change default-env.json
	3.change package.json
	4.change .env
	5.remove managed from all cds data model



--------------------------------------------
SELECT * FROM public.pcf_db_user_role_mapping

SELECT ID ,user_id_id as user_id,
(SELECT USER_NAME  FROM public.pcf_db_login_user WHERE ID=user_id_id) AS USER_NAME,
role_id_id as role_id,
(SELECT ROLE_NAME  FROM public.pcf_db_role_master WHERE ID=role_id_id) AS USER_ROLE
FROM public.pcf_db_user_role_mapping

SELECT ID,
(SELECT ROLE_NAME FROM PUBLIC.PCF_DB_ROLE_MASTER WHERE ID=ROLE_ID_ID AND IS_ACTIVE='Y') AS ROLE_NAME,
ROLE_ID_ID AS ROLE_ID,
(SELECT MODULE_NAME FROM PUBLIC.PCF_DB_MODULE_MASTER WHERE ID=MODULE_ID_ID AND IS_ACTIVE='Y') AS MODULE_NAME,
MODULE_ID_ID AS MODULE_ID,
(SELECT SUBMODULE_NAME FROM PUBLIC.PCF_DB_SUBMODULE_MASTER WHERE ID=SUBMODULE_ID_ID AND IS_ACTIVE='Y') AS SUBMODULE_NAME,
SUBMODULE_ID_ID AS SUBMODULE_ID,
PRIVILEGE_FLAG AS CAN_PERFORM
 FROM PUBLIC.PCF_DB_ROLE_MODULE_SUBMODULE_MAPPING 
 WHERE IS_ACTIVE='Y'


CREATE OR REPLACE FUNCTION GET_ALL_ROLES_BY_USER_ID(IN PARAM_USER_ID  TEXT)
RETURNS TABLE (USER_ID INT,USER_EMAIL_ID VARCHAR,ROLE_ID INT,NAME_OF_ROLE VARCHAR)
LANGUAGE plpgsql
AS $$
BEGIN 
 RETURN QUERY SELECT 
	CAST(USER_ID_ID AS INT) AS USER_ID,
	(SELECT USER_EMAIL FROM PCF_DB_LOGIN_USER WHERE ID=USER_ID_ID AND IS_ACTIVE='Y'),
	CAST(ROLE_ID_ID AS INT) AS ROLE_ID,
	(SELECT ROLE_NAME FROM PCF_DB_ROLE_MASTER WHERE ID=ROLE_ID_ID AND IS_ACTIVE='Y')
	FROM PCF_DB_USER_ROLE_MAPPING WHERE USER_ID_ID=CAST(PARAM_USER_ID AS INT)  AND IS_ACTIVE='Y' ;
END; 
$$;

 SELECT * FROM GET_ALL_ROLES_BY_USER_ID ('5') 

-------------------------------------------------------
for fetching the roles and permissions according to the user_id
------------------------------------------------------------

CREATE OR REPLACE FUNCTION GET_ALL_PRIVILEGES_BY_USER_ID(IN PARAM_USER_ID  TEXT)
RETURNS TABLE (
	USER_ID INT,
	USER_EMAIL VARCHAR,
	ROLE_ID INT,
	ROLE_NAME VARCHAR,
	MODULE_NAME VARCHAR,
	SUBMODULE_NAME VARCHAR,
	DISPLAY_MODULE_NAME VARCHAR,
	DISPLAY_SUBMODULE_NAME VARCHAR,
	PRIVILEGE VARCHAR,
	CUSTOMER_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
 RETURN QUERY 
(SELECT
LU.ID AS USER_ID, 
LU.USER_EMAIL AS USER_EMAIL,
RM.ID AS ROLE_ID,
RM.ROLE_NAME AS ROLE_NAME,
MM.MODULE_NAME AS MODULE_NAME,
SM.SUBMODULE_NAME AS SUBMODULE_NAME,
MM.DISPLAY_MODULE_NAME AS DISPLAY_MODULE_NAME,
SM.DISPLAY_SUBMODULE_NAME AS DISPLAY_SUBMODULE_NAME,
P.PRIVILEGE_NAME AS PRIVILEGE_NAME,
LU.CUSTOMER_ID_ID AS CUSTOMER_ID 
FROM PCF_DB_LOGIN_USER LU
JOIN  PCF_DB_USER_ROLE_MAPPING URM ON LU.ID=URM.USER_ID_ID
JOIN  PCF_DB_ROLE_MASTER RM ON RM.ID=URM.ROLE_ID_ID
JOIN PCF_DB_ROLE_MODULE_SUBMODULE_MAPPING RMSM ON RMSM.ROLE_ID_ID=URM.ROLE_ID_ID
JOIN PCF_DB_MODULE_MASTER MM ON MM.ID=RMSM.MODULE_ID_ID
JOIN PCF_DB_SUBMODULE_MASTER SM ON SM.ID=RMSM.SUBMODULE_ID_ID
JOIN PCF_DB_PRIVILEGE P ON P.ID=RMSM.PRIVILEGE_ID_ID
WHERE LU.ID=CAST(PARAM_USER_ID AS INT)
 AND LU.IS_ACTIVE='Y' AND URM.IS_ACTIVE='Y' AND RM.IS_ACTIVE='Y'
 AND RMSM.IS_ACTIVE='Y' AND MM.IS_ACTIVE='Y' AND SM.IS_ACTIVE='Y'
 AND P.IS_ACTIVE='Y' 
 )
UNION
(SELECT  
LU.ID AS USER_ID, 
LU.USER_EMAIL AS USER_EMAIL,
NULL AS ROLE_ID,
NULL AS ROLE_NAME,
MM.MODULE_NAME AS MODULE_NAME,
SM.SUBMODULE_NAME AS SUBMODULE_NAME,
MM.DISPLAY_MODULE_NAME AS DISPLAY_MODULE_NAME,
SM.DISPLAY_SUBMODULE_NAME AS DISPLAY_SUBMODULE_NAME,
P.PRIVILEGE_NAME AS PRIVILEGE_NAME,
 LU.CUSTOMER_ID_ID AS CUSTOMER_ID 
FROM PCF_DB_LOGIN_USER LU
JOIN PCF_DB_USER_PRIVILEGE_MAPPING UP ON UP.USER_ID_ID=LU.ID
JOIN PCF_DB_MODULE_MASTER MM ON MM.ID=UP.MODULE_ID_ID
JOIN PCF_DB_SUBMODULE_MASTER SM ON SM.ID=UP.SUBMODULE_ID_ID
JOIN PCF_DB_PRIVILEGE P ON P.ID=UP.PRIVILEGE_ID_ID
WHERE LU.ID=CAST(PARAM_USER_ID AS INT)
AND LU.IS_ACTIVE='Y'
AND UP.IS_ACTIVE='Y' 
AND MM.IS_ACTIVE='Y'
AND SM.IS_ACTIVE='Y'
AND P.IS_ACTIVE='Y');
END; 
$$;

SELECT * FROM GET_ALL_PRIVILEGES_BY_USER_ID('5')

